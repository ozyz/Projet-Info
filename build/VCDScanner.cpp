#line 2 "./build/VCDScanner.cpp"

#line 4 "./build/VCDScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
#define yy_create_buffer VCDParser_create_buffer
#define yy_delete_buffer VCDParser_delete_buffer
#define yy_flex_debug VCDParser_flex_debug
#define yy_init_buffer VCDParser_init_buffer
#define yy_flush_buffer VCDParser_flush_buffer
#define yy_load_buffer_state VCDParser_load_buffer_state
#define yy_switch_to_buffer VCDParser_switch_to_buffer
#define yyin VCDParserin
#define yyleng VCDParserleng
#define yylex VCDParserlex
#define yylineno VCDParserlineno
#define yyout VCDParserout
#define yyrestart VCDParserrestart
#define yytext VCDParsertext
#define yywrap VCDParserwrap
#define yyalloc VCDParseralloc
#define yyrealloc VCDParserrealloc
#define yyfree VCDParserfree

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE VCDParserrestart(VCDParserin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t VCDParserleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *VCDParserin, *VCDParserout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up VCDParsertext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up VCDParsertext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via VCDParserrestart()), so that the user can continue scanning by
	 * just pointing VCDParserin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when VCDParsertext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t VCDParserleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow VCDParserwrap()'s to do buffer switches
 * instead of setting up a fresh VCDParserin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void VCDParserrestart (FILE *input_file  );
void VCDParser_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE VCDParser_create_buffer (FILE *file,int size  );
void VCDParser_delete_buffer (YY_BUFFER_STATE b  );
void VCDParser_flush_buffer (YY_BUFFER_STATE b  );
void VCDParserpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void VCDParserpop_buffer_state (void );

static void VCDParserensure_buffer_stack (void );
static void VCDParser_load_buffer_state (void );
static void VCDParser_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER VCDParser_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE VCDParser_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE VCDParser_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE VCDParser_scan_bytes (yyconst char *bytes,yy_size_t len  );

/* %endif */

void *VCDParseralloc (yy_size_t  );
void *VCDParserrealloc (void *,yy_size_t  );
void VCDParserfree (void *  );

#define yy_new_buffer VCDParser_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        VCDParserensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            VCDParser_create_buffer(VCDParserin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        VCDParserensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            VCDParser_create_buffer(VCDParserin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] VCDParsertext/VCDParserin/VCDParserout/yy_state_type/VCDParserlineno etc. def's & init go here */
/* Begin user sect3 */

#define VCDParserwrap() 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *VCDParserin = (FILE *) 0, *VCDParserout = (FILE *) 0;

typedef int yy_state_type;

extern int VCDParserlineno;

int VCDParserlineno = 1;

extern char *VCDParsertext;
#define yytext_ptr VCDParsertext

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up VCDParsertext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle VCDParsertext and VCDParserleng for yymore() goes here \ */\
	VCDParserleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to VCDParsertext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[243] =
    {   0,
        0,    0,    4,    4,    6,    6,    8,    8,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   62,   60,   57,   58,
       59,   47,   60,   53,   60,   60,    4,   60,    6,    8,
       10,   60,   60,   60,   60,   11,   60,   18,   18,   18,
       18,   18,   40,   60,   60,   60,   60,   60,   60,   60,
       42,   43,   41,   44,   45,   46,   48,   56,   56,    0,
        0,    0,    0,    0,    0,    0,   54,    0,    4,    0,
        6,    8,   10,   11,   18,   18,   18,   18,   18,   18,
       40,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   42,   41,   44,   48,   56,   56,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   10,   18,
       18,   18,   18,   18,    0,    0,    0,    0,   27,    0,
        0,   31,    0,    0,   39,   56,    0,    0,    0,    1,
        0,    0,    0,   21,    0,    0,    2,   18,   14,   18,
       18,   17,    0,    0,    0,   25,    0,   30,   35,   36,
        0,    0,    0,   37,   38,    2,    0,    5,    0,    0,
        0,    0,    0,    0,   55,   55,   13,   18,   18,   22,
        0,    0,    0,    0,    0,   33,    0,    0,    0,    0,
        0,    0,   12,    0,    0,    0,   18,   16,    0,    0,

        0,    0,   32,   34,    0,    0,    0,   51,    0,    0,
        0,    0,    0,   18,   23,    0,    0,   28,   29,    3,
       49,   50,    0,    0,    0,   19,    7,   15,    0,   26,
       52,    0,    0,   24,    0,    9,    0,    0,    0,    0,
       20,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    6,    7,    8,    5,    5,    5,    9,
        9,    5,   10,    5,   11,   10,    5,   12,   13,   14,
       14,   14,   14,   14,   14,   14,   15,   16,    5,    5,
        5,    5,    5,    5,   17,   18,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   19,   17,   20,
       21,    5,   22,    5,   17,    5,   23,   24,   25,   26,

       27,   28,   29,   17,   30,   17,   31,   32,   33,   34,
       35,   36,   17,   37,   38,   39,   40,   41,   42,   43,
       44,   45,    5,    5,    5,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[46] =
    {   0,
        1,    1,    1,    1,    2,    3,    2,    3,    3,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2
    } ;

static yyconst flex_int16_t yy_base[257] =
    {   0,
        0,   44,    8,   17,   21,   25,   30,   52,   82,  115,
      155,    0,  193,    0,  235,  257,   68,   72,  272,  287,
       65,   70,   89,   96,  104,  123,  452,  453,  453,  453,
      453,  453,  285,  453,  262,  439,    0,  423,    0,    0,
      437,  410,  409,  408,  407,  453,  406,    0,  416,    0,
      407,  418,  120,  399,  405,  415,  410,  396,   12,   79,
        0,  453,    0,  124,  453,  453,  132,    0,  408,  399,
       27,  399,  407,  401,  394,    5,  277,  418,    0,  394,
        0,    0,  415,  453,    0,  397,  388,  390,  397,  384,
      197,  394,  381,  382,   30,  382,  384,  386,  381,  377,

      376,    0,    0,  201,  212,    0,  378,  378,  371,  376,
      382,  372,  373,  367,  367,  366,  387,  375,  453,  370,
      368,  373,  357,  365,  361,  367,  370,  360,  453,  355,
      363,  117,  363,  361,  453,  361,  353,  358,  348,  357,
      346,  354,  355,  453,  341,  304,  453,  344,    0,  338,
      344,    0,  336,  345,  340,  333,  339,  453,  453,  453,
      336,  332,  341,  453,  453,    0,  340,  453,   78,  339,
      338,  326,  328,  332,  453,  310,    0,  288,  290,  453,
      288,  281,  276,  260,  272,  453,  264,  258,  259,   60,
      260,  249,  453,  251,  219,  219,  218,    0,  215,  195,

      200,    9,  453,  453,  189,  190,  193,  453,  182,  188,
      194,  177,  169,  168,  453,  123,  115,  453,  453,  453,
      453,  453,  103,   87,   85,  453,  453,    0,   74,  453,
      453,   56,   39,  453,   26,  453,   25,   19,   10,    3,
      453,  453,  326,  329,  332,  335,  338,  341,  344,  347,
      349,  351,  352,  354,  356,  358
    } ;

static yyconst flex_int16_t yy_def[257] =
    {   0,
      243,  243,  244,  244,  245,  245,  246,  246,  243,  243,
      242,   11,  243,   13,  247,  247,  248,  248,  243,  243,
      243,  243,    2,    2,  249,  249,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  250,  242,  251,  252,
      242,  242,  242,  242,  242,  242,  242,  253,  253,  253,
      253,  253,  242,  242,  242,  242,  242,  242,  242,  242,
      254,  242,  255,  242,  242,  242,  242,  256,  256,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  250,  242,
      251,  252,  242,  242,  253,  253,  253,  253,  253,  253,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,

      242,  254,  255,  242,  242,  256,  256,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  253,
      253,  253,  253,  253,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  256,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  253,  253,  253,
      253,  253,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  256,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  253,  253,  253,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  253,  253,  242,  242,

      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  253,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  253,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,    0,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242
    } ;

static yyconst flex_int16_t yy_nxt[499] =
    {   0,
      242,   29,   30,   31,  242,  242,   32,   33,  242,  242,
      242,   34,   34,   28,  242,   38,   28,   35,   34,   34,
      218,  219,   28,   35,   38,   28,   28,  115,   38,   28,
       28,  116,   38,   28,   87,   28,   36,   38,   28,   88,
      241,   97,   34,  240,   34,   29,   30,   31,   98,  109,
       32,   33,  128,  239,  238,   34,   34,   28,  129,   38,
       28,   35,   34,   34,  237,  236,  110,   35,   28,   28,
       28,   28,   28,   28,   28,   28,   67,   67,   67,   67,
       36,   67,   67,   67,   67,  235,   34,  207,   34,   38,
       28,   28,   28,  208,   41,   28,   28,   28,   28,   28,

      189,   99,   28,   28,   28,   28,   28,   28,  100,   42,
      234,   69,  190,  101,   43,   44,  233,   45,  191,   46,
      232,   47,   38,   28,   28,   28,   28,   41,  159,  160,
       69,   91,   91,   91,   91,  104,  104,  104,  104,  161,
      231,  230,   42,  105,  105,  105,  105,   43,   44,  229,
       45,  162,   46,  163,   47,   28,   28,   28,   28,   28,
       28,   28,   38,   28,   28,   28,   28,   28,   28,   28,
       28,   48,   48,   48,   48,   28,   28,   48,   49,   48,
       48,   48,   50,   48,   48,   48,   48,   51,   48,   48,
       48,   48,   48,   52,   48,   48,   48,   48,   48,   48,

       38,  228,  227,  226,   53,   53,   53,   53,   91,   91,
       91,   91,  104,  104,  104,  104,  225,  224,  223,   54,
      222,  221,   55,  105,  105,  105,  105,  220,   56,   57,
       58,   59,  217,  216,   60,   28,   28,   28,   28,   28,
       28,   28,   38,   28,   28,   28,   28,   28,   28,   28,
       28,  215,  214,  213,  212,   62,   28,   28,   28,   28,
       28,   28,   28,   28,   38,   28,   28,   28,   28,   28,
       28,   28,   28,   77,   77,  211,  210,   62,   28,   38,
       77,   77,  209,   64,   64,   64,   64,   65,   77,   77,
      206,  205,  204,   66,   38,   77,   77,  203,   64,   64,

       64,   64,   65,  202,   77,  201,   77,  200,   66,   70,
       71,   72,  175,  175,  199,  176,  198,  197,  175,   77,
      117,   77,   73,   74,   75,   76,   28,   28,   28,   37,
       37,   37,   39,   39,   39,   40,   40,   40,   61,   61,
       61,   63,   63,   63,   68,   68,   68,   79,   79,   81,
       81,   82,   82,   85,   85,  102,  102,  103,  103,  106,
      106,  196,  195,  194,  193,  192,  188,  187,  186,  185,
      184,  183,  182,  181,  180,  179,  178,  177,  174,  173,
      172,  171,  170,  169,  168,  167,  166,  165,  164,  158,
      157,  156,  155,  154,  153,  152,  151,  150,  149,  148,

      147,  146,  145,  144,  143,  142,  141,  140,  139,  138,
      137,  136,  135,  134,  133,  132,  131,  130,  127,  126,
      125,  124,  123,  122,  121,  120,  119,  118,  117,  114,
      113,  112,  111,  108,  107,   96,   95,   94,   93,   92,
       90,   89,   86,   84,   84,   84,   84,   84,   83,   80,
       78,  242,   27,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242

    } ;

static yyconst flex_int16_t yy_chk[499] =
    {   0,
        0,    1,    1,    1,    0,    0,    1,    1,    0,    0,
        0,    1,    1,    3,    0,    3,    3,    1,    1,    1,
      202,  202,    4,    1,    4,    4,    5,   76,    5,    5,
        6,   76,    6,    6,   50,    7,    1,    7,    7,   50,
      240,   59,    1,  239,    1,    2,    2,    2,   59,   71,
        2,    2,   95,  238,  237,    2,    2,    8,   95,    8,
        8,    2,    2,    2,  235,  233,   71,    2,   17,   17,
       17,   17,   18,   18,   18,   18,   21,   21,   21,   21,
        2,   22,   22,   22,   22,  232,    2,  190,    2,    9,
       23,   23,   23,  190,    9,   23,   23,   24,   24,   24,

      169,   60,   24,   24,   25,   25,   25,   25,   60,    9,
      229,   25,  169,   60,    9,    9,  225,    9,  169,    9,
      224,    9,   10,   26,   26,   26,   26,   10,  132,  132,
       26,   53,   53,   53,   53,   64,   64,   64,   64,  132,
      223,  217,   10,   67,   67,   67,   67,   10,   10,  216,
       10,  132,   10,  132,   10,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       13,  214,  213,  212,   13,   13,   13,   13,   91,   91,
       91,   91,  104,  104,  104,  104,  211,  210,  209,   13,
      207,  206,   13,  105,  105,  105,  105,  205,   13,   13,
       13,   13,  201,  200,   13,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,  199,  197,  196,  195,   15,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   35,   35,  194,  192,   16,   16,   19,
       35,   35,  191,   19,   19,   19,   19,   19,   77,   77,
      189,  188,  187,   19,   20,   77,   77,  185,   20,   20,

       20,   20,   20,  184,   35,  183,   35,  182,   20,   33,
       33,   33,  146,  146,  181,  146,  179,  178,  146,   77,
      176,   77,   33,   33,   33,   33,  243,  243,  243,  244,
      244,  244,  245,  245,  245,  246,  246,  246,  247,  247,
      247,  248,  248,  248,  249,  249,  249,  250,  250,  251,
      251,  252,  252,  253,  253,  254,  254,  255,  255,  256,
      256,  174,  173,  172,  171,  170,  167,  163,  162,  161,
      157,  156,  155,  154,  153,  151,  150,  148,  145,  143,
      142,  141,  140,  139,  138,  137,  136,  134,  133,  131,
      130,  128,  127,  126,  125,  124,  123,  122,  121,  120,

      118,  117,  116,  115,  114,  113,  112,  111,  110,  109,
      108,  107,  101,  100,   99,   98,   97,   96,   94,   93,
       92,   90,   89,   88,   87,   86,   83,   80,   78,   75,
       74,   73,   72,   70,   69,   58,   57,   56,   55,   54,
       52,   51,   49,   47,   45,   44,   43,   42,   41,   38,
       36,   27,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int VCDParser_flex_debug;
int VCDParser_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[61] =
    {   0,
      107,  111,  116,  122,  127,  133,  138,  144,  149,  155,
      160,  180,  186,  191,  196,  201,  206,  211,  216,  221,
      226,  232,  233,  234,  235,  236,  237,  238,  239,  240,
      241,  242,  243,  244,  245,  246,  247,  248,  249,  251,
      257,  263,  268,  274,  279,  284,  289,  295,  301,  307,
      313,  319,  325,  354,  360,  366,  372,  373,  374,  381
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *VCDParsertext;
#line 1 "./src/VCDScanner.l"
/*!
@file
@brief Contains the lexical definition for the parser.
*/
#line 7 "./src/VCDScanner.l"
    
#include <cerrno>
#include <climits>
#include <cstdlib>
#include <string>
#include <cstring>
#include <cstdio>

#include "VCDFileParser.hpp"
#include "VCDParser.hpp"

#undef VCDParserwrap
#define VCDParserwrap() 1

#define yyterminate() return VCDParser::parser::make_END(loc)

static VCDParser::location loc;
    
#define YY_NO_INPUT 1












#line 97 "./src/VCDScanner.l"
#define YY_USER_ACTION loc.columns(VCDParserleng);
#line 795 "./build/VCDScanner.cpp"

#define INITIAL 0
#define IN_COMMENT 1
#define IN_DATE 2
#define IN_VERSION 3
#define IN_TIMESCALE 4
#define IN_SCOPE 5
#define IN_VAR 6
#define IN_VAR_PID 7
#define IN_VAR_PSIZE 8
#define IN_VAR_RNG 9
#define IN_SIMTIME 10
#define IN_VAL_CHANGES 11
#define IN_VAL_IDCODE 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int VCDParserlex_destroy (void );

int VCDParserget_debug (void );

void VCDParserset_debug (int debug_flag  );

YY_EXTRA_TYPE VCDParserget_extra (void );

void VCDParserset_extra (YY_EXTRA_TYPE user_defined  );

FILE *VCDParserget_in (void );

void VCDParserset_in  (FILE * in_str  );

FILE *VCDParserget_out (void );

void VCDParserset_out  (FILE * out_str  );

yy_size_t VCDParserget_leng (void );

char *VCDParserget_text (void );

int VCDParserget_lineno (void );

void VCDParserset_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int VCDParserwrap (void );
#else
extern int VCDParserwrap (void );
#endif
#endif

/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( VCDParsertext, VCDParserleng, 1, VCDParserout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( VCDParserin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( VCDParserin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, VCDParserin))==0 && ferror(VCDParserin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(VCDParserin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int VCDParserlex (void);

#define YY_DECL int VCDParserlex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after VCDParsertext and VCDParserleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 100 "./src/VCDScanner.l"



    loc.step();



#line 1055 "./build/VCDScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! VCDParserin )
/* %if-c-only */
			VCDParserin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! VCDParserout )
/* %if-c-only */
			VCDParserout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			VCDParserensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				VCDParser_create_buffer(VCDParserin,YY_BUF_SIZE );
		}

		VCDParser_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of VCDParsertext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 243 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 242 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for VCDParserlineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( VCDParser_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 61 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], VCDParsertext );
			else if ( yy_act == 61 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         VCDParsertext );
			else if ( yy_act == 62 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 107 "./src/VCDScanner.l"
{
    return VCDParser::parser::make_TOK_KW_END(loc);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 111 "./src/VCDScanner.l"
{
    BEGIN(INITIAL);
    return VCDParser::parser::make_TOK_KW_END(loc);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 116 "./src/VCDScanner.l"
{
    BEGIN(IN_COMMENT);
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_COMMENT(loc);
}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 122 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_COMMENT_TEXT(std::string(VCDParsertext),loc);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 127 "./src/VCDScanner.l"
{
    BEGIN(IN_DATE);
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_DATE(loc);
}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 133 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_DATE_TEXT(std::string(VCDParsertext),loc);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 138 "./src/VCDScanner.l"
{
    BEGIN(IN_VERSION);
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_VERSION(loc);
}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 144 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_VERSION_TEXT(std::string(VCDParsertext),loc);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 149 "./src/VCDScanner.l"
{
    BEGIN(IN_TIMESCALE);
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_TIMESCALE(loc);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 155 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_TIME_NUMBER(std::atoi(VCDParsertext),loc);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 160 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    VCDTimeUnit tr = TIME_S;

    if(std::strcmp(VCDParsertext, "s")) {
        tr = TIME_S;
    } else if(std::strcmp(VCDParsertext, "ms")) {
        tr = TIME_MS;
    } else if(std::strcmp(VCDParsertext, "us")) {
        tr = TIME_US;
    } else if(std::strcmp(VCDParsertext, "ns")) {
        tr = TIME_NS;
    } else if(std::strcmp(VCDParsertext, "ps")) {
        tr = TIME_PS;
    }

    return VCDParser::parser::make_TOK_TIME_UNIT(tr,loc);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 180 "./src/VCDScanner.l"
{
    BEGIN(IN_SCOPE);
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_SCOPE(loc);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 186 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_BEGIN(VCD_SCOPE_BEGIN,loc);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 191 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_FORK(VCD_SCOPE_FORK,loc);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 196 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_FUNCTION(VCD_SCOPE_FUNCTION, loc);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 201 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_MODULE(VCD_SCOPE_MODULE, loc);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 206 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_TASK(VCD_SCOPE_TASK, loc);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 211 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_IDENTIFIER(std::string(VCDParsertext),loc);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 216 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_UPSCOPE(loc);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 221 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_ENDDEFINITIONS(loc);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 226 "./src/VCDScanner.l"
{
    BEGIN(IN_VAR);
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_VAR(loc);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 232 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_EVENT    ,loc);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 233 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_INTEGER  ,loc);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 234 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_PARAMETER,loc);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 235 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_REAL     ,loc);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 236 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_REALTIME ,loc);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 237 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_REG      ,loc);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 238 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_SUPPLY0  ,loc);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 239 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_SUPPLY1  ,loc);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 240 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_TIME     ,loc);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 241 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_TRI      ,loc);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 242 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_TRIAND   ,loc);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 243 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_TRIOR    ,loc);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 244 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_TRIREG   ,loc);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 245 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_TRI0     ,loc);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 246 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_TRI1     ,loc);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 247 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_WAND     ,loc);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 248 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_WIRE     ,loc);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 249 "./src/VCDScanner.l"
{return VCDParser::parser::make_TOK_VAR_TYPE(VCD_VAR_WOR      ,loc);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 251 "./src/VCDScanner.l"
{
    BEGIN(IN_VAR_PSIZE);
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_DECIMAL_NUM(std::atoi(VCDParsertext),loc);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 257 "./src/VCDScanner.l"
{
    BEGIN(IN_VAR_PID);
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_IDENTIFIER(std::string(VCDParsertext),loc);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 263 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_IDENTIFIER(std::string(VCDParsertext),loc);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 268 "./src/VCDScanner.l"
{
    BEGIN(IN_VAR_RNG);
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_BRACKET_O(loc);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 274 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_DECIMAL_NUM(std::atoi(VCDParsertext),loc);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 279 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_COLON(loc);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 284 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_BRACKET_C(loc);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 289 "./src/VCDScanner.l"
{
    BEGIN(IN_SIMTIME);
    //std::cout << "simtime: " << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_HASH(loc);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 295 "./src/VCDScanner.l"
{
    BEGIN(INITIAL);
    //std::cout << VCDParsertext << std::endl;
    return VCDParser::parser::make_TOK_DECIMAL_NUM(std::atoi(VCDParsertext),loc);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 301 "./src/VCDScanner.l"
{
    BEGIN(IN_VAL_CHANGES);
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_DUMPALL(loc);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 307 "./src/VCDScanner.l"
{
    BEGIN(IN_VAL_CHANGES);
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_DUMPOFF(loc);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 313 "./src/VCDScanner.l"
{
    BEGIN(IN_VAL_CHANGES);
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_DUMPON(loc);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 319 "./src/VCDScanner.l"
{
    BEGIN(IN_VAL_CHANGES);
    //std::cout << VCDParsertext << ", ";
    return VCDParser::parser::make_TOK_KW_DUMPVARS(loc);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 325 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    BEGIN(IN_VAL_IDCODE);

    VCDBit val;

    switch(VCDParsertext[0]) {
        case '0':
            val = VCD_0;
            break;
        case '1':
            val = VCD_1;
            break;
        case 'x':
        case 'X':
            val = VCD_X;
            break;
        case 'z':
        case 'Z':
            val = VCD_Z;
            break;
        default:
            val = VCD_X;
            break;
    }

    return VCDParser::parser::make_TOK_VALUE(val, loc);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 354 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    BEGIN(IN_VAL_IDCODE);
    return VCDParser::parser::make_TOK_BIN_NUM(std::string(VCDParsertext), loc);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 360 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << ", ";
    BEGIN(IN_VAL_IDCODE);
    return VCDParser::parser::make_TOK_REAL_NUM(std::string(VCDParsertext), loc);
}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 366 "./src/VCDScanner.l"
{
    //std::cout << VCDParsertext << std::endl;
    BEGIN(INITIAL);
    return VCDParser::parser::make_TOK_IDENTIFIER(std::string(VCDParsertext),loc);
}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 372 "./src/VCDScanner.l"
{loc.columns();}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 373 "./src/VCDScanner.l"
{loc.lines();}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 374 "./src/VCDScanner.l"
{loc.lines();}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IN_COMMENT):
case YY_STATE_EOF(IN_DATE):
case YY_STATE_EOF(IN_VERSION):
case YY_STATE_EOF(IN_TIMESCALE):
case YY_STATE_EOF(IN_SCOPE):
case YY_STATE_EOF(IN_VAR):
case YY_STATE_EOF(IN_VAR_PID):
case YY_STATE_EOF(IN_VAR_PSIZE):
case YY_STATE_EOF(IN_VAR_RNG):
case YY_STATE_EOF(IN_SIMTIME):
case YY_STATE_EOF(IN_VAL_CHANGES):
case YY_STATE_EOF(IN_VAL_IDCODE):
#line 377 "./src/VCDScanner.l"
{
    return VCDParser::parser::make_END(loc);
}
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 381 "./src/VCDScanner.l"
{
    // DO nothing!
}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 385 "./src/VCDScanner.l"
ECHO;
	YY_BREAK
#line 1664 "./build/VCDScanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed VCDParserin at a new source and called
			 * VCDParserlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = VCDParserin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( VCDParserwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * VCDParsertext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of VCDParserlex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					VCDParserrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			VCDParserrestart(VCDParserin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) VCDParserrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 243 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 243 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 242);

		return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					VCDParserrestart(VCDParserin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( VCDParserwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve VCDParsertext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and VCDParserlineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void VCDParserrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        VCDParserensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            VCDParser_create_buffer(VCDParserin,YY_BUF_SIZE );
	}

	VCDParser_init_buffer(YY_CURRENT_BUFFER,input_file );
	VCDParser_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void VCDParser_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		VCDParserpop_buffer_state();
	 *		VCDParserpush_buffer_state(new_buffer);
     */
	VCDParserensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	VCDParser_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (VCDParserwrap()) processing, but the only time this flag
	 * is looked at is after VCDParserwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void VCDParser_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	VCDParserin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE VCDParser_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) VCDParseralloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in VCDParser_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) VCDParseralloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in VCDParser_create_buffer()" );

	b->yy_is_our_buffer = 1;

	VCDParser_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with VCDParser_create_buffer()
 * 
 */
/* %if-c-only */
    void VCDParser_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		VCDParserfree((void *) b->yy_ch_buf  );

	VCDParserfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a VCDParserrestart() or at EOF.
 */
/* %if-c-only */
    static void VCDParser_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	VCDParser_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then VCDParser_init_buffer was _probably_
     * called from VCDParserrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void VCDParser_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		VCDParser_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void VCDParserpush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	VCDParserensure_buffer_stack();

	/* This block is copied from VCDParser_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from VCDParser_switch_to_buffer. */
	VCDParser_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void VCDParserpop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	VCDParser_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		VCDParser_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void VCDParserensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)VCDParseralloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in VCDParserensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)VCDParserrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in VCDParserensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE VCDParser_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) VCDParseralloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in VCDParser_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	VCDParser_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to VCDParserlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       VCDParser_scan_bytes() instead.
 */
YY_BUFFER_STATE VCDParser_scan_string (yyconst char * yystr )
{
    
	return VCDParser_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to VCDParserlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE VCDParser_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) VCDParseralloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in VCDParser_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = VCDParser_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in VCDParser_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up VCDParsertext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		VCDParsertext[VCDParserleng] = (yy_hold_char); \
		(yy_c_buf_p) = VCDParsertext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		VCDParserleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int VCDParserget_lineno  (void)
{
        
    return VCDParserlineno;
}

/** Get the input stream.
 * 
 */
FILE *VCDParserget_in  (void)
{
        return VCDParserin;
}

/** Get the output stream.
 * 
 */
FILE *VCDParserget_out  (void)
{
        return VCDParserout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t VCDParserget_leng  (void)
{
        return VCDParserleng;
}

/** Get the current token.
 * 
 */

char *VCDParserget_text  (void)
{
        return VCDParsertext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void VCDParserset_lineno (int  line_number )
{
    
    VCDParserlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see VCDParser_switch_to_buffer
 */
void VCDParserset_in (FILE *  in_str )
{
        VCDParserin = in_str ;
}

void VCDParserset_out (FILE *  out_str )
{
        VCDParserout = out_str ;
}

int VCDParserget_debug  (void)
{
        return VCDParser_flex_debug;
}

void VCDParserset_debug (int  bdebug )
{
        VCDParser_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from VCDParserlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    VCDParserin = stdin;
    VCDParserout = stdout;
#else
    VCDParserin = (FILE *) 0;
    VCDParserout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * VCDParserlex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* VCDParserlex_destroy is for both reentrant and non-reentrant scanners. */
int VCDParserlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		VCDParser_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		VCDParserpop_buffer_state();
	}

	/* Destroy the stack itself. */
	VCDParserfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * VCDParserlex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *VCDParseralloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *VCDParserrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void VCDParserfree (void * ptr )
{
	free( (char *) ptr );	/* see VCDParserrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 385 "./src/VCDScanner.l"



void VCDFileParser::scan_begin() {
    VCDParser_flex_debug = trace_scanning;
    if(filepath.empty() || filepath == "-") {
        VCDParserin = stdin;
    }
    else if(!(VCDParserin = fopen(filepath.c_str(), "r"))) {
        error("Cannot open "+filepath+": "+strerror(errno));
        exit(EXIT_FAILURE);
    }
}

void VCDFileParser::scan_end() {
    fclose(VCDParserin);
    VCDParserpop_buffer_state();
}

